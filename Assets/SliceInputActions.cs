//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/SliceInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SliceInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SliceInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""SliceInputActions"",
    ""maps"": [
        {
            ""name"": ""SliceMap"",
            ""id"": ""0036a7d8-87ca-4056-8e7b-2f10cd052d26"",
            ""actions"": [
                {
                    ""name"": ""SliceAction"",
                    ""type"": ""Button"",
                    ""id"": ""da5d1396-d96a-4933-92cb-cfde182f3f63"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dbf1bf86-6981-435a-bdb2-fc7bf2e6547c"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SliceAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1a5a2bbe-6ec2-47fe-b12e-abe5f5279a82"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SliceAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2dd73c3c-e33d-4da9-b583-396e13a096f8"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SliceAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1aa47dbc-3440-48da-845e-15a8dfef9716"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SliceAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // SliceMap
        m_SliceMap = asset.FindActionMap("SliceMap", throwIfNotFound: true);
        m_SliceMap_SliceAction = m_SliceMap.FindAction("SliceAction", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SliceMap
    private readonly InputActionMap m_SliceMap;
    private List<ISliceMapActions> m_SliceMapActionsCallbackInterfaces = new List<ISliceMapActions>();
    private readonly InputAction m_SliceMap_SliceAction;
    public struct SliceMapActions
    {
        private @SliceInputActions m_Wrapper;
        public SliceMapActions(@SliceInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @SliceAction => m_Wrapper.m_SliceMap_SliceAction;
        public InputActionMap Get() { return m_Wrapper.m_SliceMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SliceMapActions set) { return set.Get(); }
        public void AddCallbacks(ISliceMapActions instance)
        {
            if (instance == null || m_Wrapper.m_SliceMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SliceMapActionsCallbackInterfaces.Add(instance);
            @SliceAction.started += instance.OnSliceAction;
            @SliceAction.performed += instance.OnSliceAction;
            @SliceAction.canceled += instance.OnSliceAction;
        }

        private void UnregisterCallbacks(ISliceMapActions instance)
        {
            @SliceAction.started -= instance.OnSliceAction;
            @SliceAction.performed -= instance.OnSliceAction;
            @SliceAction.canceled -= instance.OnSliceAction;
        }

        public void RemoveCallbacks(ISliceMapActions instance)
        {
            if (m_Wrapper.m_SliceMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISliceMapActions instance)
        {
            foreach (var item in m_Wrapper.m_SliceMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SliceMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SliceMapActions @SliceMap => new SliceMapActions(this);
    public interface ISliceMapActions
    {
        void OnSliceAction(InputAction.CallbackContext context);
    }
}
