//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/CheatControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CheatControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CheatControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CheatControls"",
    ""maps"": [
        {
            ""name"": ""CustomCheatControls"",
            ""id"": ""7930720e-1d48-43e9-a56c-68c3c69948a8"",
            ""actions"": [
                {
                    ""name"": ""Win"",
                    ""type"": ""Button"",
                    ""id"": ""38dc0f4d-98cb-4904-99fc-a9b57236c6bb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Slow Down"",
                    ""type"": ""Button"",
                    ""id"": ""28c64bfa-00d8-4e01-ab4e-5750f221d55f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Change Position"",
                    ""type"": ""Button"",
                    ""id"": ""4a9e45a4-be54-46ed-acc9-8f5083747ef0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c2857bd4-54b7-4e93-8554-a574c7c6e3f2"",
                    ""path"": ""<Keyboard>/f10"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Win"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""95cc105e-abdb-4846-9958-586c2b2bd915"",
                    ""path"": ""<Keyboard>/f11"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Slow Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""28a9fb29-23f5-47dd-baf6-eb3d54f3d681"",
                    ""path"": ""<Keyboard>/f12"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Change Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // CustomCheatControls
        m_CustomCheatControls = asset.FindActionMap("CustomCheatControls", throwIfNotFound: true);
        m_CustomCheatControls_Win = m_CustomCheatControls.FindAction("Win", throwIfNotFound: true);
        m_CustomCheatControls_SlowDown = m_CustomCheatControls.FindAction("Slow Down", throwIfNotFound: true);
        m_CustomCheatControls_ChangePosition = m_CustomCheatControls.FindAction("Change Position", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CustomCheatControls
    private readonly InputActionMap m_CustomCheatControls;
    private List<ICustomCheatControlsActions> m_CustomCheatControlsActionsCallbackInterfaces = new List<ICustomCheatControlsActions>();
    private readonly InputAction m_CustomCheatControls_Win;
    private readonly InputAction m_CustomCheatControls_SlowDown;
    private readonly InputAction m_CustomCheatControls_ChangePosition;
    public struct CustomCheatControlsActions
    {
        private @CheatControls m_Wrapper;
        public CustomCheatControlsActions(@CheatControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Win => m_Wrapper.m_CustomCheatControls_Win;
        public InputAction @SlowDown => m_Wrapper.m_CustomCheatControls_SlowDown;
        public InputAction @ChangePosition => m_Wrapper.m_CustomCheatControls_ChangePosition;
        public InputActionMap Get() { return m_Wrapper.m_CustomCheatControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CustomCheatControlsActions set) { return set.Get(); }
        public void AddCallbacks(ICustomCheatControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_CustomCheatControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CustomCheatControlsActionsCallbackInterfaces.Add(instance);
            @Win.started += instance.OnWin;
            @Win.performed += instance.OnWin;
            @Win.canceled += instance.OnWin;
            @SlowDown.started += instance.OnSlowDown;
            @SlowDown.performed += instance.OnSlowDown;
            @SlowDown.canceled += instance.OnSlowDown;
            @ChangePosition.started += instance.OnChangePosition;
            @ChangePosition.performed += instance.OnChangePosition;
            @ChangePosition.canceled += instance.OnChangePosition;
        }

        private void UnregisterCallbacks(ICustomCheatControlsActions instance)
        {
            @Win.started -= instance.OnWin;
            @Win.performed -= instance.OnWin;
            @Win.canceled -= instance.OnWin;
            @SlowDown.started -= instance.OnSlowDown;
            @SlowDown.performed -= instance.OnSlowDown;
            @SlowDown.canceled -= instance.OnSlowDown;
            @ChangePosition.started -= instance.OnChangePosition;
            @ChangePosition.performed -= instance.OnChangePosition;
            @ChangePosition.canceled -= instance.OnChangePosition;
        }

        public void RemoveCallbacks(ICustomCheatControlsActions instance)
        {
            if (m_Wrapper.m_CustomCheatControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICustomCheatControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_CustomCheatControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CustomCheatControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CustomCheatControlsActions @CustomCheatControls => new CustomCheatControlsActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface ICustomCheatControlsActions
    {
        void OnWin(InputAction.CallbackContext context);
        void OnSlowDown(InputAction.CallbackContext context);
        void OnChangePosition(InputAction.CallbackContext context);
    }
}
