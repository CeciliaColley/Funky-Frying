//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Custom Inputs/CustomInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CustomInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CustomInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CustomInput"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""1d08e06b-cbe4-4bcb-952e-fb977e47c3bf"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""734ba487-f85c-4ec5-83e1-501164f40a3c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""9023f143-f748-429d-8b54-07ce55fef17b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ae2b64d6-03e3-479b-a874-215f1188ee38"",
                    ""path"": ""<Keyboard>/#(W)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""928e853d-bbf6-4006-8ca2-9cb1540a4a5a"",
                    ""path"": ""<Keyboard>/#(S)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""399fa65b-e0c3-4c0a-a220-619730ed56c5"",
                    ""path"": ""<Keyboard>/#(A)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""cc61362e-6f25-47be-82f4-64b67dca2960"",
                    ""path"": ""<Keyboard>/#(D)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Controller"",
                    ""id"": ""95999eae-e35b-4df0-b453-41b8cd42dc5e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b121f87a-57d1-4069-8d80-5798ecf3b4ad"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b49297dd-62eb-42e4-9892-9d271bb74ebf"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a93d8155-4494-4015-8f79-589d7f6ecdb7"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""758c2b7e-95ef-442f-b46d-498548f6468b"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""InteractionWithController"",
            ""id"": ""da7db42c-c511-4b49-96b1-14aa73d195b0"",
            ""actions"": [
                {
                    ""name"": ""GoToMainMenu"",
                    ""type"": ""Button"",
                    ""id"": ""6b712296-92d6-4cbc-8655-3d0e3b44303e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InteractWithCustomer"",
                    ""type"": ""Button"",
                    ""id"": ""51d8c367-67f2-4165-8d4a-19b68bad9c60"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeScene"",
                    ""type"": ""Button"",
                    ""id"": ""a8f4716c-870b-4cbe-9be7-2fbc5fc0643d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""OpenClipboard"",
                    ""type"": ""Button"",
                    ""id"": ""b555d042-a846-48cd-8971-a4c91bb6c181"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f9751e54-f9b3-4502-bbb6-98f7cb9fc942"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""GoToMainMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""550695da-e8f7-4537-8b60-9612af36791f"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""InteractWithCustomer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aa14c0f2-e1b6-491a-b1a2-a880d48188f0"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""ChangeScene"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13ad6168-cb11-4d09-859f-7c2fccef2e42"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""OpenClipboard"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Controller"",
            ""bindingGroup"": ""Controller"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
        // InteractionWithController
        m_InteractionWithController = asset.FindActionMap("InteractionWithController", throwIfNotFound: true);
        m_InteractionWithController_GoToMainMenu = m_InteractionWithController.FindAction("GoToMainMenu", throwIfNotFound: true);
        m_InteractionWithController_InteractWithCustomer = m_InteractionWithController.FindAction("InteractWithCustomer", throwIfNotFound: true);
        m_InteractionWithController_ChangeScene = m_InteractionWithController.FindAction("ChangeScene", throwIfNotFound: true);
        m_InteractionWithController_OpenClipboard = m_InteractionWithController.FindAction("OpenClipboard", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Movement;
    public struct PlayerActions
    {
        private @CustomInput m_Wrapper;
        public PlayerActions(@CustomInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Player_Movement;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // InteractionWithController
    private readonly InputActionMap m_InteractionWithController;
    private List<IInteractionWithControllerActions> m_InteractionWithControllerActionsCallbackInterfaces = new List<IInteractionWithControllerActions>();
    private readonly InputAction m_InteractionWithController_GoToMainMenu;
    private readonly InputAction m_InteractionWithController_InteractWithCustomer;
    private readonly InputAction m_InteractionWithController_ChangeScene;
    private readonly InputAction m_InteractionWithController_OpenClipboard;
    public struct InteractionWithControllerActions
    {
        private @CustomInput m_Wrapper;
        public InteractionWithControllerActions(@CustomInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @GoToMainMenu => m_Wrapper.m_InteractionWithController_GoToMainMenu;
        public InputAction @InteractWithCustomer => m_Wrapper.m_InteractionWithController_InteractWithCustomer;
        public InputAction @ChangeScene => m_Wrapper.m_InteractionWithController_ChangeScene;
        public InputAction @OpenClipboard => m_Wrapper.m_InteractionWithController_OpenClipboard;
        public InputActionMap Get() { return m_Wrapper.m_InteractionWithController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteractionWithControllerActions set) { return set.Get(); }
        public void AddCallbacks(IInteractionWithControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_InteractionWithControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InteractionWithControllerActionsCallbackInterfaces.Add(instance);
            @GoToMainMenu.started += instance.OnGoToMainMenu;
            @GoToMainMenu.performed += instance.OnGoToMainMenu;
            @GoToMainMenu.canceled += instance.OnGoToMainMenu;
            @InteractWithCustomer.started += instance.OnInteractWithCustomer;
            @InteractWithCustomer.performed += instance.OnInteractWithCustomer;
            @InteractWithCustomer.canceled += instance.OnInteractWithCustomer;
            @ChangeScene.started += instance.OnChangeScene;
            @ChangeScene.performed += instance.OnChangeScene;
            @ChangeScene.canceled += instance.OnChangeScene;
            @OpenClipboard.started += instance.OnOpenClipboard;
            @OpenClipboard.performed += instance.OnOpenClipboard;
            @OpenClipboard.canceled += instance.OnOpenClipboard;
        }

        private void UnregisterCallbacks(IInteractionWithControllerActions instance)
        {
            @GoToMainMenu.started -= instance.OnGoToMainMenu;
            @GoToMainMenu.performed -= instance.OnGoToMainMenu;
            @GoToMainMenu.canceled -= instance.OnGoToMainMenu;
            @InteractWithCustomer.started -= instance.OnInteractWithCustomer;
            @InteractWithCustomer.performed -= instance.OnInteractWithCustomer;
            @InteractWithCustomer.canceled -= instance.OnInteractWithCustomer;
            @ChangeScene.started -= instance.OnChangeScene;
            @ChangeScene.performed -= instance.OnChangeScene;
            @ChangeScene.canceled -= instance.OnChangeScene;
            @OpenClipboard.started -= instance.OnOpenClipboard;
            @OpenClipboard.performed -= instance.OnOpenClipboard;
            @OpenClipboard.canceled -= instance.OnOpenClipboard;
        }

        public void RemoveCallbacks(IInteractionWithControllerActions instance)
        {
            if (m_Wrapper.m_InteractionWithControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInteractionWithControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_InteractionWithControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InteractionWithControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InteractionWithControllerActions @InteractionWithController => new InteractionWithControllerActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_ControllerSchemeIndex = -1;
    public InputControlScheme ControllerScheme
    {
        get
        {
            if (m_ControllerSchemeIndex == -1) m_ControllerSchemeIndex = asset.FindControlSchemeIndex("Controller");
            return asset.controlSchemes[m_ControllerSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface IInteractionWithControllerActions
    {
        void OnGoToMainMenu(InputAction.CallbackContext context);
        void OnInteractWithCustomer(InputAction.CallbackContext context);
        void OnChangeScene(InputAction.CallbackContext context);
        void OnOpenClipboard(InputAction.CallbackContext context);
    }
}
