//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Custom Inputs/BasketMovement.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class InputBasketMovement: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public InputBasketMovement()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""BasketMovement"",
    ""maps"": [
        {
            ""name"": ""BasketMovementActionMap"",
            ""id"": ""3ab1eb67-a338-425f-871e-72904b1a25d3"",
            ""actions"": [
                {
                    ""name"": ""Move Left"",
                    ""type"": ""Button"",
                    ""id"": ""78e1a571-9e75-4a18-888a-06c48a1ae42f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move RIght"",
                    ""type"": ""Button"",
                    ""id"": ""d4918024-b81d-4de5-b76e-11fcd6a26a85"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""80f788e4-b0de-496f-97f3-86e765f5c96e"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb0f5ec4-5916-433a-9ed1-ec5bf7d86a6a"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f4f6f5d1-339b-41f1-9aa4-dac1dbfb7d17"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move RIght"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""53cc91d8-79ba-48fd-902b-73dd9715773b"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move RIght"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // BasketMovementActionMap
        m_BasketMovementActionMap = asset.FindActionMap("BasketMovementActionMap", throwIfNotFound: true);
        m_BasketMovementActionMap_MoveLeft = m_BasketMovementActionMap.FindAction("Move Left", throwIfNotFound: true);
        m_BasketMovementActionMap_MoveRIght = m_BasketMovementActionMap.FindAction("Move RIght", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // BasketMovementActionMap
    private readonly InputActionMap m_BasketMovementActionMap;
    private List<IBasketMovementActionMapActions> m_BasketMovementActionMapActionsCallbackInterfaces = new List<IBasketMovementActionMapActions>();
    private readonly InputAction m_BasketMovementActionMap_MoveLeft;
    private readonly InputAction m_BasketMovementActionMap_MoveRIght;
    public struct BasketMovementActionMapActions
    {
        private InputBasketMovement m_Wrapper;
        public BasketMovementActionMapActions(InputBasketMovement wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveLeft => m_Wrapper.m_BasketMovementActionMap_MoveLeft;
        public InputAction MoveRight => m_Wrapper.m_BasketMovementActionMap_MoveRIght;
        public InputActionMap Get() { return m_Wrapper.m_BasketMovementActionMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BasketMovementActionMapActions set) { return set.Get(); }
        public void AddCallbacks(IBasketMovementActionMapActions instance)
        {
            if (instance == null || m_Wrapper.m_BasketMovementActionMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_BasketMovementActionMapActionsCallbackInterfaces.Add(instance);
            @MoveLeft.started += instance.OnMoveLeft;
            @MoveLeft.performed += instance.OnMoveLeft;
            @MoveLeft.canceled += instance.OnMoveLeft;
            MoveRight.started += instance.OnMoveRIght;
            MoveRight.performed += instance.OnMoveRIght;
            MoveRight.canceled += instance.OnMoveRIght;
        }

        private void UnregisterCallbacks(IBasketMovementActionMapActions instance)
        {
            @MoveLeft.started -= instance.OnMoveLeft;
            @MoveLeft.performed -= instance.OnMoveLeft;
            @MoveLeft.canceled -= instance.OnMoveLeft;
            MoveRight.started -= instance.OnMoveRIght;
            MoveRight.performed -= instance.OnMoveRIght;
            MoveRight.canceled -= instance.OnMoveRIght;
        }

        public void RemoveCallbacks(IBasketMovementActionMapActions instance)
        {
            if (m_Wrapper.m_BasketMovementActionMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IBasketMovementActionMapActions instance)
        {
            foreach (var item in m_Wrapper.m_BasketMovementActionMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_BasketMovementActionMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public BasketMovementActionMapActions @BasketMovementActionMap => new BasketMovementActionMapActions(this);
    public interface IBasketMovementActionMapActions
    {
        void OnMoveLeft(InputAction.CallbackContext context);
        void OnMoveRIght(InputAction.CallbackContext context);
    }
}
