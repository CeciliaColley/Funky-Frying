//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Custom Inputs/KitchenInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @KitchenInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @KitchenInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""KitchenInputs"",
    ""maps"": [
        {
            ""name"": ""KitchenControllerInputs"",
            ""id"": ""59814ac5-23a2-44dd-b8d3-d84af36a0b7f"",
            ""actions"": [
                {
                    ""name"": ""GoToFrontOfHouse"",
                    ""type"": ""Button"",
                    ""id"": ""4578034b-b7e0-4669-bd23-4801e915a6e5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Open Recipe Book"",
                    ""type"": ""Button"",
                    ""id"": ""a898aa3e-ebe1-457f-a9ba-edc54be43885"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MainMenu"",
                    ""type"": ""Button"",
                    ""id"": ""c811d26e-f5fe-40e6-957a-b5e148c3c5fe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c66f3ccb-4302-4de4-828b-94d62bda3886"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""GoToFrontOfHouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ac92f6b3-897d-4e02-aaa5-b563c31648e4"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Open Recipe Book"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5acd80d0-112d-4b7b-9a09-a42249aad25e"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""MainMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // KitchenControllerInputs
        m_KitchenControllerInputs = asset.FindActionMap("KitchenControllerInputs", throwIfNotFound: true);
        m_KitchenControllerInputs_GoToFrontOfHouse = m_KitchenControllerInputs.FindAction("GoToFrontOfHouse", throwIfNotFound: true);
        m_KitchenControllerInputs_OpenRecipeBook = m_KitchenControllerInputs.FindAction("Open Recipe Book", throwIfNotFound: true);
        m_KitchenControllerInputs_MainMenu = m_KitchenControllerInputs.FindAction("MainMenu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // KitchenControllerInputs
    private readonly InputActionMap m_KitchenControllerInputs;
    private List<IKitchenControllerInputsActions> m_KitchenControllerInputsActionsCallbackInterfaces = new List<IKitchenControllerInputsActions>();
    private readonly InputAction m_KitchenControllerInputs_GoToFrontOfHouse;
    private readonly InputAction m_KitchenControllerInputs_OpenRecipeBook;
    private readonly InputAction m_KitchenControllerInputs_MainMenu;
    public struct KitchenControllerInputsActions
    {
        private @KitchenInputs m_Wrapper;
        public KitchenControllerInputsActions(@KitchenInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @GoToFrontOfHouse => m_Wrapper.m_KitchenControllerInputs_GoToFrontOfHouse;
        public InputAction @OpenRecipeBook => m_Wrapper.m_KitchenControllerInputs_OpenRecipeBook;
        public InputAction @MainMenu => m_Wrapper.m_KitchenControllerInputs_MainMenu;
        public InputActionMap Get() { return m_Wrapper.m_KitchenControllerInputs; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KitchenControllerInputsActions set) { return set.Get(); }
        public void AddCallbacks(IKitchenControllerInputsActions instance)
        {
            if (instance == null || m_Wrapper.m_KitchenControllerInputsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KitchenControllerInputsActionsCallbackInterfaces.Add(instance);
            @GoToFrontOfHouse.started += instance.OnGoToFrontOfHouse;
            @GoToFrontOfHouse.performed += instance.OnGoToFrontOfHouse;
            @GoToFrontOfHouse.canceled += instance.OnGoToFrontOfHouse;
            @OpenRecipeBook.started += instance.OnOpenRecipeBook;
            @OpenRecipeBook.performed += instance.OnOpenRecipeBook;
            @OpenRecipeBook.canceled += instance.OnOpenRecipeBook;
            @MainMenu.started += instance.OnMainMenu;
            @MainMenu.performed += instance.OnMainMenu;
            @MainMenu.canceled += instance.OnMainMenu;
        }

        private void UnregisterCallbacks(IKitchenControllerInputsActions instance)
        {
            @GoToFrontOfHouse.started -= instance.OnGoToFrontOfHouse;
            @GoToFrontOfHouse.performed -= instance.OnGoToFrontOfHouse;
            @GoToFrontOfHouse.canceled -= instance.OnGoToFrontOfHouse;
            @OpenRecipeBook.started -= instance.OnOpenRecipeBook;
            @OpenRecipeBook.performed -= instance.OnOpenRecipeBook;
            @OpenRecipeBook.canceled -= instance.OnOpenRecipeBook;
            @MainMenu.started -= instance.OnMainMenu;
            @MainMenu.performed -= instance.OnMainMenu;
            @MainMenu.canceled -= instance.OnMainMenu;
        }

        public void RemoveCallbacks(IKitchenControllerInputsActions instance)
        {
            if (m_Wrapper.m_KitchenControllerInputsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKitchenControllerInputsActions instance)
        {
            foreach (var item in m_Wrapper.m_KitchenControllerInputsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KitchenControllerInputsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KitchenControllerInputsActions @KitchenControllerInputs => new KitchenControllerInputsActions(this);
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IKitchenControllerInputsActions
    {
        void OnGoToFrontOfHouse(InputAction.CallbackContext context);
        void OnOpenRecipeBook(InputAction.CallbackContext context);
        void OnMainMenu(InputAction.CallbackContext context);
    }
}
